import axios from 'axios';

// ƒê·ªãnh nghƒ©a c√°c role trong h·ªá th·ªëng
export enum UserRole {
  ADMIN = 'Admin',
  MANAGE = 'Manage',
  USER = 'User',
}

// Interface cho d·ªØ li·ªáu ng∆∞·ªùi d√πng
export interface User {
  user_id: number;
  full_name: string;
  email: string;
  role: UserRole;
  department?: string;
  avatar?: string;
}

// Interface cho k·∫øt qu·∫£ ƒëƒÉng nh·∫≠p
export interface LoginResponse {
  access_token: string;
  refresh_token: string;
  user: User;
}

// Thi·∫øt l·∫≠p API URL
const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000/api';

// H√†m ƒëƒÉng nh·∫≠p
export const login = async (
  email: string,
  password: string
): Promise<LoginResponse> => {
  try {
    const response = await axios.post(`${API_URL}/login/`, { email, password });
    const data = response.data;

    // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p v√†o localStorage
    localStorage.setItem('access_token', data.access_token);
    localStorage.setItem('refresh_token', data.refresh_token);
    localStorage.setItem('user', JSON.stringify(data.user));

    return data;
  } catch (error) {
    console.error('Login error:', error);
    throw error;
  }
};

// H√†m ƒëƒÉng xu·∫•t
export const logout = (): void => {
  localStorage.removeItem('access_token');
  localStorage.removeItem('refresh_token');
  localStorage.removeItem('user');
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
export const getCurrentUser = (): User | null => {
  if (typeof window === 'undefined') return null; // üîê Ch·ªâ ch·∫°y khi ƒëang ·ªü client
  const userJson = localStorage.getItem('user');
  return userJson ? JSON.parse(userJson) : null;
};

// Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ ƒëƒÉng nh·∫≠p kh√¥ng

export const isAuthenticated = (): boolean => {
  if (typeof window === 'undefined') return false;
  return !!localStorage.getItem('access_token');
};

// Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ quy·ªÅn admin kh√¥ng
export const isAdmin = (): boolean => {
  const user = getCurrentUser();
  return user?.role === UserRole.ADMIN;
};

// Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ quy·ªÅn qu·∫£n l√Ω kh√¥ng
export const isManager = (): boolean => {
  const user = getCurrentUser();
  return user?.role === UserRole.MANAGE || user?.role === UserRole.ADMIN;
};

// H√†m n√†y s·∫Ω g·ªçi API ƒë·ªÉ refresh token
export const refreshToken = async (): Promise<string | null> => {
  try {
    const refresh = localStorage.getItem('refresh_token');

    if (!refresh) return null;

    const response = await axios.post(`${API_URL}/token/refresh/`, {
      refresh: refresh,
    });

    const newAccessToken = response.data.access;
    localStorage.setItem('access_token', newAccessToken);

    return newAccessToken;
  } catch (error) {
    console.error('Error refreshing token:', error);
    logout();
    return null;
  }
};

// Thi·∫øt l·∫≠p axios interceptor ƒë·ªÉ t·ª± ƒë·ªông th√™m token v√†o header
axios.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('access_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Thi·∫øt l·∫≠p axios interceptor ƒë·ªÉ t·ª± ƒë·ªông refresh token khi token h·∫øt h·∫°n
axios.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu l·ªói 401 (Unauthorized) v√† ch∆∞a th·ª≠ refresh token
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      const newToken = await refreshToken();

      if (newToken) {
        originalRequest.headers.Authorization = `Bearer ${newToken}`;
        return axios(originalRequest);
      }
    }

    return Promise.reject(error);
  }
);
